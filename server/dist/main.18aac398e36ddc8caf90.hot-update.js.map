{"version":3,"sources":["webpack:///./src/api/resources/payment/payment.controller.js"],"names":["secret","generateController","createOne","req","res","hash","crypto","createHmac","update","body","digest","event","data","reference","amount","customer","first_name","last_name","email","metadata","marchantEmail","invoiceId","headers","PaymentModel","create","customerEmail","err","status","send","error","Error","InvoiceModel","findOneAndUpdate","_id","$set","new","console","log","doc","Transfer","success","message","getOne","id","params","findOne"],"mappings":"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","file":"main.18aac398e36ddc8caf90.hot-update.js","sourcesContent":["import crypto from 'crypto';\nimport PaymentModel from './payment.model';\nimport InvoiceModel from '../invoice/invoice.model';\nimport * as mailer from '../../modules/mailer';\nimport generateController from '../../modules/generateController';\nimport Transfer from '../../modules/transfer';\n\nconst secret = process.env.PAYSTACK_SECRET;\n\nexport default generateController(PaymentModel, {\n    createOne: (req, res) => {\n        const hash = crypto.createHmac('sha512', secret).update(JSON.stringify(req.body)).digest('hex');\n        const { event, data: { reference, amount, customer: { first_name, last_name, email, metadata: { marchantEmail, invoiceId } } } } = req.body;\n\n        if (hash === req.headers['x-paystack-signature'] && event === 'charge.success') {\n            PaymentModel.create({ customerEmail: email, marchantEmail, reference, amount, invoiceId }, (err) => {\n                if (err) return res.status(400).send({ error: new Error(error), status: false });\n                \n                InvoiceModel.findOneAndUpdate({ _id: invoiceId }, { $set :{ status: 'paid' } }, {new: true}, async (err) => {\n                    if (err) return res.status(400).send({ error: new Error(error), status: false });\n\n                    console.log('doc', doc);\n\n                    try {\n                        await Transfer(doc['marchantName'], doc['marchantAccountNumber'], doc['marchantBankCode'], doc['deliveryAmount']);\n                        await mailer.sendReceiptMail(`${first_name} ${last_name}`, email, marchantEmail, amount);\n                        res.status(200).send({ success: true });\n                    } catch (err) {\n                        console.log(err);\n                        return res.status(400).send({ error: { message: 'Could not send mail' }, success: false });\n                    }\n                })\n            });\n        } else {\n            res.status(400).send({ success: false });\n        }\n    },\n    getOne: (req, res) => {\n        var id = req.params.invoiceId;\n        PaymentModel.findOne({ invoiceId: id }, function (err, doc) {\n            if (err) res.status(401).send({ success: false, error: { ...err } });\n            res.status(200).send({ success: true, data: doc });\n        });\n    }\n});"],"sourceRoot":""}