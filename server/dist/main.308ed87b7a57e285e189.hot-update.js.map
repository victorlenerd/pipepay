{"version":3,"sources":["webpack:///./src/api/resources/payment/payment.controller.js"],"names":["secret","generateController","createOne","req","res","hash","crypto","createHmac","update","body","digest","event","data","amount","paid","invoice_code","customer","first_name","last_name","email","headers","InvoiceModel","findOneAndUpdate","$set","status","new","err","doc","send","error","Error","Transfer","PaymentModel","create","customerEmail","reference","invoiceId","marchantEmail","success","console","log","message","getOne","id","params","findOne"],"mappings":"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","file":"main.308ed87b7a57e285e189.hot-update.js","sourcesContent":["import crypto from 'crypto';\nimport PaymentModel from './payment.model';\nimport InvoiceModel from '../invoice/invoice.model';\nimport * as mailer from '../../modules/mailer';\nimport generateController from '../../modules/generateController';\nimport Transfer from '../../modules/transfer';\n\nconst secret = process.env.PAYSTACK_SECRET;\n\nexport default generateController(PaymentModel, {\n    createOne: (req, res) => {\n        const hash = crypto.createHmac('sha512', secret).update(JSON.stringify(req.body)).digest('hex');\n        const { event, data: { amount, paid, invoice_code, customer: { first_name, last_name, email } } } = req.body;\n\n        if (hash === req.headers['x-paystack-signature'] && event === 'invoice.update' && paid) {\n\n            InvoiceModel.findOneAndUpdate({ invoice_code }, { $set :{ status: 'paid' } }, { new: true }, async (err, doc) => {\n                if (err) return res.status(400).send({ error: new Error(error), status: false });\n                try {\n                    await Transfer(doc['marchantName'], doc['marchantAccountNumber'], doc['marchantBankCode'], doc['deliveryAmount'] * 100);\n                    await PaymentModel.create({ customerEmail: email, reference, amount, invoiceId: invoice_code });\n                    await mailer.sendReceiptMail(`${first_name} ${last_name}`, email, marchantEmail, amount);\n                    res.status(200).send({ success: true });\n                } catch (err) {\n                    console.log(err);\n                    return res.status(400).send({ error: { message: 'Could not send mail' }, success: false });\n                }\n            })\n\n            PaymentModel.create({ customerEmail: email, reference, amount, invoiceId: invoice_code }, (err) => {\n                if (err) return res.status(400).send({ error: new Error(error), status: false });\n                \n            });\n\n        } else {\n            res.status(400).send({ success: false });\n        }\n    },\n    getOne: (req, res) => {\n        var id = req.params.invoiceId;\n        PaymentModel.findOne({ invoiceId: id }, function (err, doc) {\n            if (err) res.status(401).send({ success: false, error: { ...err } });\n            res.status(200).send({ success: true, data: doc });\n        });\n    }\n});"],"sourceRoot":""}