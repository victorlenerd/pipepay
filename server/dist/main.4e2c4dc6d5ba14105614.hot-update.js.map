{"version":3,"sources":["webpack:///./src/api/resources/invoice/invoice.controller.js"],"names":["generateController","createOne","req","res","body","userId","user","sub","marchantEmail","email","marchantName","name","marchantAccountNumber","marchantBankCode","verifyCode","recode","type","bankCharges","pipePayFee","Math","min","purchaseAmount","totalPrice","deliveryAmount","milestones","length","reduce","pv","amount","line_items","customerTotalAmount","customerDeliveryFee","customPipepayFee","reconciliator","who","original","fee","whoPaysDeliveryFee","whoPaysPipepayFee","push","map","description","CreateInvoice","customerEmail","customerName","phone","customerPhone","request_code","data","invoice_code","InvoiceModel","create","err","doc","console","log","status","send","error","message","success","save","getAll","find","invoices"],"mappings":"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","file":"main.4e2c4dc6d5ba14105614.hot-update.js","sourcesContent":["import InvoiceModel from './invoice.model';\nimport recode from '../../modules/recode';\nimport generateController from '../../modules/generateController';\nimport { CreateInvoice } from '../../modules/invoice';\n\nexport default generateController(InvoiceModel, {\n    createOne: async (req, res) => {\n        var body = req.body;\n\n        body.userId = req.user.sub;        \n        body.marchantEmail = req.user.email;\n        body.marchantName = req.user.name;\n        body.marchantAccountNumber = req.user['custom:account_number'];\n        body.marchantBankCode =  req.user['custom:bank_code'];\n\n        body.verifyCode = process.env.NODE_ENV === 'testing' ? 'AXYZ0000' : recode();\n\n        if (body.type === 'good') {            \n            body.bankCharges = 100;\n            body.pipePayFee = Math.min(((body.purchaseAmount * 5) / 100),  5000) + body.bankCharges;\n            body.totalPrice = body.purchaseAmount + body.deliveryAmount + body.pipePayFee;\n        } else {\n            body.bankCharges = ((body.milestones.length * 50));\n            body.purchaseAmount = body.milestones.reduce((pv, { amount }) => { return amount + pv }, 0);\n            body.purchaseAmount\n            body.pipePayFee = Math.min(((body.purchaseAmount * 5) / 100),  5000) + body.bankCharges;\n            body.deliveryAmount = 0;\n            body.totalPrice =  body.purchaseAmount + body.pipePayFee ;\n        }\n\n        let line_items = [];\n\n        let customerTotalAmount = body.purchaseAmount;\n        let customerDeliveryFee = 0;\n        let customPipepayFee = 0;\n\n        const reconciliator = (who, original, fee) => {\n            if (who === 'both') {\n                return original += (fee / 2);\n            } else if (who === 'buyer') {\n                return original += fee;\n            } else {\n                return original;\n            }\n        }\n\n        customerDeliveryFee = reconciliator(body.whoPaysDeliveryFee, customerDeliveryFee, body.deliveryAmount);\n        customPipepayFee = reconciliator(body.whoPaysPipepayFee, customPipepayFee, body.pipePayFee);\n\n        if (body.type === 'good') {\n            line_items = [{ 'name': 'Purchase Price', 'amount': customerTotalAmount * 100 }];\n\n            if (customPipepayFee > 0) line_items.push({ 'name': 'PipePay Fee', 'amount': customPipepayFee * 100 });\n            if (customerDeliveryFee > 0) line_items.push({ 'name': 'Delivery Fee', 'amount': customerDeliveryFee * 100 });\n        } else  {\n            line_items = body.milestones.map(({ description, amount }) => ({ name: description, amount: amount * 100 }));\n            line_items.push({ 'name': 'PipePay Fee', 'amount':  body.pipePayFee * 100 });\n        }\n\n        try {\n            const { data: { request_code } } = await CreateInvoice({ email: body.customerEmail, name: body.customerName, phone: body.customerPhone }, customerTotalAmount * 100, body.description, line_items);\n            body.invoice_code = request_code;\n\n            InvoiceModel.create(body, async (err, doc) => {\n                if (err) {\n                    console.log(\"err\", err);\n                    return res.status(400).send({ error: { message: 'Could not create the invoice' }, success: false });\n                }\n                delete doc.verifyCode;\n                doc.status = \"sent\";\n                doc.save();\n                res.send({ data: doc, success: true });\n            });\n        } catch(err) {\n            console.log('err', err);\n            return res.status(400).send({ err, success: false });\n        }\n    },\n    getAll: async (req, res) => {\n        const userId = req.user.sub;\n        try {\n            const invoices = await InvoiceModel.find({ userId });\n            console.log({ invoices });\n            return res.status(200).send({ data: { invoices }, success: true });\n        } catch(err) {\n            console.error('err', err);\n            return res.status(400).send({ err, success: false });\n        }\n    }\n});"],"sourceRoot":""}