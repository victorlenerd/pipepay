{"version":3,"sources":["webpack:///./src/api/resources/payment/payment.controller.js"],"names":["secret","generateController","createOne","req","res","hash","crypto","createHmac","update","body","digest","event","data","reference","amount","paid","invoice_code","customer","first_name","last_name","email","headers","InvoiceModel","findOneAndUpdate","$set","status","new","err","doc","send","error","Error","Transfer","marchantEmail","success","console","log","message","PaymentModel","create","customerEmail","invoiceId","getOne","id","params","findOne"],"mappings":"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","file":"main.45b5e7b0f978f9775f07.hot-update.js","sourcesContent":["import crypto from 'crypto';\nimport PaymentModel from './payment.model';\nimport InvoiceModel from '../invoice/invoice.model';\nimport * as mailer from '../../modules/mailer';\nimport generateController from '../../modules/generateController';\nimport Transfer from '../../modules/transfer';\n\nconst secret = process.env.PAYSTACK_SECRET;\n\nexport default generateController(PaymentModel, {\n    createOne: (req, res) => {\n        const hash = crypto.createHmac('sha512', secret).update(JSON.stringify(req.body)).digest('hex');\n        const { event, data: { reference, amount, paid, invoice_code, customer: { first_name, last_name, email } } } = req.body;\n\n        if (hash === req.headers['x-paystack-signature'] && event === 'invoice.update' && paid) {\n\n            InvoiceModel.findOneAndUpdate({ invoice_code }, { $set :{ status: 'paid' } }, { new: true }, async (err, doc) => {\n                if (err) return res.status(400).send({ error: new Error(error), status: false });\n                try {\n                    await Transfer(doc['marchantName'], doc['marchantAccountNumber'], doc['marchantBankCode'], doc['deliveryAmount'] * 100);\n                    await mailer.sendReceiptMail(`${first_name} ${last_name}`, email, marchantEmail, amount);\n                    res.status(200).send({ success: true });\n                } catch (err) {\n                    console.log(err);\n                    return res.status(400).send({ error: { message: 'Could not send mail' }, success: false });\n                }\n            })\n\n            PaymentModel.create({ customerEmail: email, reference, amount, invoiceId: invoice_code }, (err) => {\n                if (err) return res.status(400).send({ error: new Error(error), status: false });\n                \n            });\n\n        } else {\n            res.status(400).send({ success: false });\n        }\n    },\n    getOne: (req, res) => {\n        var id = req.params.invoiceId;\n        PaymentModel.findOne({ invoiceId: id }, function (err, doc) {\n            if (err) res.status(401).send({ success: false, error: { ...err } });\n            res.status(200).send({ success: true, data: doc });\n        });\n    }\n});"],"sourceRoot":""}