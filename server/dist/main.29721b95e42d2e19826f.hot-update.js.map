{"version":3,"sources":["webpack:///./src/api/resources/payment/payment.controller.js"],"names":["secret","generateController","createOne","req","res","hash","crypto","createHmac","update","body","digest","event","data","reference","amount","paid","invoice_code","customer","first_name","last_name","email","headers","PaymentModel","create","customerEmail","invoiceId","err","status","send","error","Error","success","getOne","id","params","findOne","doc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,SAAS,kDAAf;;AAEA,+DAAe,2EAAAC,CAAmB,sDAAnB,EAAiC;AAC5CC,eAAW,mBAACC,GAAD,EAAMC,GAAN,EAAc;AACrB,YAAMC,OAAO,6CAAAC,CAAOC,UAAP,CAAkB,QAAlB,EAA4BP,MAA5B,EAAoCQ,MAApC,CAA2C,4EAAeL,IAAIM,IAAnB,CAA3C,EAAqEC,MAArE,CAA4E,KAA5E,CAAb;AADqB,wBAE0FP,IAAIM,IAF9F;AAAA,YAEbE,KAFa,aAEbA,KAFa;AAAA,uCAENC,IAFM;AAAA,YAEEC,SAFF,kBAEEA,SAFF;AAAA,YAEaC,MAFb,kBAEaA,MAFb;AAAA,YAEqBC,IAFrB,kBAEqBA,IAFrB;AAAA,YAE2BC,YAF3B,kBAE2BA,YAF3B;AAAA,mDAEyCC,QAFzC;AAAA,YAEqDC,UAFrD,yBAEqDA,UAFrD;AAAA,YAEiEC,SAFjE,yBAEiEA,SAFjE;AAAA,YAE4EC,KAF5E,yBAE4EA,KAF5E;;;AAIrB,YAAIf,SAASF,IAAIkB,OAAJ,CAAY,sBAAZ,CAAT,IAAgDV,UAAU,gBAA1D,IAA8EI,IAAlF,EAAwF;;AAEpFO,YAAA,sDAAAA,CAAaC,MAAb,CAAoB,EAAEC,eAAeJ,KAAjB,EAAwBP,oBAAxB,EAAmCC,cAAnC,EAA2CW,WAAWT,YAAtD,EAApB,EAA0F,UAACU,GAAD,EAAS;AAC/F,oBAAIA,GAAJ,EAAS,OAAOtB,IAAIuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,IAAIC,KAAJ,CAAUD,KAAV,CAAT,EAA2BF,QAAQ,KAAnC,EAArB,CAAP;AAEZ,aAHD;AAKH,SAPD,MAOO;AACHvB,gBAAIuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEG,SAAS,KAAX,EAArB;AACH;AACJ,KAf2C;AAgB5CC,YAAQ,gBAAC7B,GAAD,EAAMC,GAAN,EAAc;AAClB,YAAI6B,KAAK9B,IAAI+B,MAAJ,CAAWT,SAApB;AACAH,QAAA,sDAAAA,CAAaa,OAAb,CAAqB,EAAEV,WAAWQ,EAAb,EAArB,EAAwC,UAAUP,GAAV,EAAeU,GAAf,EAAoB;AACxD,gBAAIV,GAAJ,EAAStB,IAAIuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEG,SAAS,KAAX,EAAkBF,OAAA,oEAAAA,KAAYH,GAAZ,CAAlB,EAArB;AACTtB,gBAAIuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEG,SAAS,IAAX,EAAiBnB,MAAMwB,GAAvB,EAArB;AACH,SAHD;AAIH;AAtB2C,CAAjC,CAAf,E","file":"main.29721b95e42d2e19826f.hot-update.js","sourcesContent":["import crypto from 'crypto';\nimport PaymentModel from './payment.model';\nimport InvoiceModel from '../invoice/invoice.model';\nimport * as mailer from '../../modules/mailer';\nimport generateController from '../../modules/generateController';\nimport Transfer from '../../modules/transfer';\n\nconst secret = process.env.PAYSTACK_SECRET;\n\nexport default generateController(PaymentModel, {\n    createOne: (req, res) => {\n        const hash = crypto.createHmac('sha512', secret).update(JSON.stringify(req.body)).digest('hex');\n        const { event, data: { reference, amount, paid, invoice_code, customer: { first_name, last_name, email } } } = req.body;\n\n        if (hash === req.headers['x-paystack-signature'] && event === 'invoice.update' && paid) {\n\n            PaymentModel.create({ customerEmail: email, reference, amount, invoiceId: invoice_code }, (err) => {\n                if (err) return res.status(400).send({ error: new Error(error), status: false });\n                \n            });\n\n        } else {\n            res.status(400).send({ success: false });\n        }\n    },\n    getOne: (req, res) => {\n        var id = req.params.invoiceId;\n        PaymentModel.findOne({ invoiceId: id }, function (err, doc) {\n            if (err) res.status(401).send({ success: false, error: { ...err } });\n            res.status(200).send({ success: true, data: doc });\n        });\n    }\n});"],"sourceRoot":""}