{"version":3,"sources":["webpack:///./src/api/resources/payment/payment.controller.js"],"names":["secret","generateController","createOne","req","res","hash","crypto","createHmac","update","body","digest","event","data","reference","transaction","amount","paid","invoice_code","customer","first_name","last_name","email","console","error","headers","InvoiceModel","findOneAndUpdate","$set","status","new","err","doc","send","Error","_id","type","whoPaysDeliveryFee","marchantName","marchantEmail","marchantBankCode","deliveryAmount","marchantAccountNumber","Transfer","PaymentModel","create","customerEmail","invoiceId","success","log","message","getOne","id","params","findOne"],"mappings":"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","file":"main.653e800e58b9e91843ca.hot-update.js","sourcesContent":["import crypto from 'crypto';\nimport PaymentModel from './payment.model';\nimport InvoiceModel from '../invoice/invoice.model';\nimport * as mailer from '../../modules/mailer';\nimport generateController from '../../modules/generateController';\nimport Transfer from '../../modules/transfer';\n\nconst secret = process.env.PAYSTACK_SECRET;\n\nexport default generateController(PaymentModel, {\n    createOne: (req, res) => {\n        const hash = crypto.createHmac('sha512', secret).update(JSON.stringify(req.body)).digest('hex');\n        const { event, data: { transaction: { reference }, amount, paid, invoice_code, customer: { first_name, last_name, email } } } = req.body;\n        console.error({ hash, event, paid });\n        if (hash === req.headers['x-paystack-signature'] && event === 'invoice.update' && paid) {\n            InvoiceModel.findOneAndUpdate({ invoice_code }, { $set :{ status: 'paid' } }, { new: true }, async (err, doc) => {\n                if (err) {\n                    console.error(err);\n                    return res.status(400).send({ error: new Error(error), status: false });\n                }\n\n                const { \n                    _id,\n                    type,\n                    whoPaysDeliveryFee,\n                    marchantName,\n                    marchantEmail,\n                    marchantBankCode,\n                    deliveryAmount,\n                    marchantAccountNumber\n                } = doc;\n            \n\n                try {\n                    if (type === 'good') {\n                        await Transfer(marchantName, marchantAccountNumber, marchantBankCode, deliveryAmount);\n                        await PaymentModel.create({ customerEmail: email, marchantEmail, reference, deliveryAmount, invoiceId: _id });\n                    }\n\n                    await mailer.sendReceiptMail(`${first_name} ${last_name}`, email, marchantEmail, amount);\n                    res.status(200).send({ success: true });\n                } catch (err) {\n                    console.log(err);\n                    return res.status(400).send({ error: { message: 'Could not send mail' }, success: false });\n                }\n            })\n        } else {\n            res.status(400).send({ success: false });\n        }\n    },\n    getOne: (req, res) => {\n        var id = req.params.invoiceId;\n        PaymentModel.findOne({ invoiceId: id }, function (err, doc) {\n            if (err) res.status(401).send({ success: false, error: { ...err } });\n            res.status(200).send({ success: true, data: doc });\n        });\n    }\n});"],"sourceRoot":""}