{"version":3,"sources":["webpack:///./src/api/modules/mailer.js"],"names":["ZOHO_EMAIL","ZOHO_PASSWORD","transporter","nodemailer","createTransport","host","port","secure","auth","user","pass","from","sendInvoiceMail","customerEmail","totalPrice","resolve","reject","mailOptions","to","subject","text","sendMail","error","info","Error","sendTo","mailOption","sendReceiptMail","customerName","marchantEmail","amount","all","sendTransferMail","esolve","sendDisputeMail","reason","disputeFrom","supportEmail","sendCustormerVerificationCode","code"],"mappings":"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","file":"main.ee8d9cf6682b8fa7700a.hot-update.js","sourcesContent":["import nodemailer from 'nodemailer';\n\nconst ZOHO_EMAIL = process.env.ZOHO_EMAIL;\nconst ZOHO_PASSWORD = process.env.ZOHO_PASSWORD;\n\nconst transporter = nodemailer.createTransport({\n    host: 'smtp.zoho.com',\n    port: 465,\n    secure: true,\n    auth: {\n        user: ZOHO_EMAIL,\n        pass: ZOHO_PASSWORD\n    }\n});\n\nconst from = 'Pipepay <hello@pipepay.africa>';\n\nexport const sendInvoiceMail = ({ customerEmail, totalPrice }) => new Promise((resolve, reject) => {\n    let mailOptions = {\n        from,\n        to: customerEmail,\n        subject: 'Your Invoice Is Ready',\n        text: `Your invoice is worth ${totalPrice }`,\n    };\n\n    transporter.sendMail(mailOptions, (error, info) => {\n        if (error) {\n            return reject(new Error(error));\n        }\n\n        resolve(info);\n    });\n});\n\nconst sendTo = (mailOption) => new Promise((resolve, reject) => {\n    transporter.sendMail(mailOption, (error, info) => {\n        if (error) {\n            return reject(new Error(error));\n        }\n\n        resolve(info);\n    });\n});\n\nexport const sendReceiptMail = (customerName, customerEmail, marchantEmail, amount) => new Promise(async (resolve, reject) => {\n    let mailOption = {\n        from,\n        subject: 'Your Receipt Is Ready',\n        text: `${customerName} made payment of ${amount}`,\n    };\n\n\n    try {\n        await Promise.all([\n            sendTo({ ...mailOption, to: customerEmail }),\n            sendTo({ ...mailOption, to: marchantEmail })\n        ]);\n        resolve();\n    } catch(err) {\n        reject(err);\n    }\n});\n\nexport const sendTransferMail = (customerEmail, marchantEmail) => new Promise((esolve, reject) => {\n\n});\n\nexport const sendDisputeMail = (marchantEmail, customerEmail, customerName, reason, disputeFrom, supportEmail = 'hello@pipepay.africa') => new Promise(async (resolve, reject) => {\n    let mailOption = {\n        from,\n        subject: 'Payment Dispute',\n    };\n\n    try {\n        if (disputeFrom !== 'marchant') {\n            await Promise.all([\n                sendTo({ ...mailOption, to: customerEmail,  text: 'Your dispute has been received, you will hear from our support rep soon.' }),\n                sendTo({ ...mailOption, to: marchantEmail, text: `New dispute from ${customerName} reason being that: \"${reason}\"` }),\n                sendTo({ ...mailOption, to: supportEmail, text: `New dispute from ${customerEmail} reason being that: \"${reason}\" marchant email is ` })\n            ]);\n        } else {\n            await Promise.all([\n                sendTo({ ...mailOption, to: customerEmail,  text: 'Your dispute has been received, you will hear from our support rep soon.' }),\n                sendTo({ ...mailOption, to: marchantEmail, text: `New dispute from ${customerName} reason being that: \"${reason}\"` })\n            ]);\n        }\n        resolve();\n    } catch(err) {\n        reject(err);\n    }\n});\n\nexport const sendCustormerVerificationCode = (customerEmail, code) => new Promise(async (resolve, reject) => {\n    let mailOption = {\n        from,\n        subject: 'Invoice Mail Verification',\n        text: `Your invoice verfication code is ${code}`\n    };\n\n    try {\n        await sendTo({ ...mailOption, to: customerEmail });\n        resolve();\n    } catch(err) {\n        reject(err);\n    }\n});"],"sourceRoot":""}