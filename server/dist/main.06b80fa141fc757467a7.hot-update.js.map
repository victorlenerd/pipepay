{"version":3,"sources":["webpack:///./src/api/modules/invoice.js","webpack:///./src/api/resources/invoice/invoice.controller.js","webpack:///./src/api/resources/invoice/invoice.model.js"],"names":["secret","CreateCustomer","name","email","phone","req","res","request","post","set","send","end","err","body","reject","resolve","CreateInvoice","customer","amount","description","status","customer_code","data","due_date","generateController","createOne","userId","user","id","marchantEmail","verifyCode","recode","totalPrice","purchaseAmount","deliveryAmount","Invoice","customerEmail","customerName","customerPhone","request_code","invoice_code","InvoiceModel","create","doc","error","message","success","InvoiceSchema","mongoose","Schema","String","Number","marchantName","marchantAccountNumber","marchantBankCode","model"],"mappings":"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","file":"main.06b80fa141fc757467a7.hot-update.js","sourcesContent":["import request from 'superagent';\nconst secret = process.env.PAYSTACK_SECRET;\n\nconst CreateCustomer = ({ name, email, phone }) => new Promise((req, res) => {\n    request\n        .post(`https://api.paystack.co/customer`)\n        .set(\"Authorization\", `Bearer ${secret}`)\n        .send({\n            name,\n            email,\n            phone\n        })\n        .end((err, { body }) => {\n            if (err) reject(err);\n            resolve(body);\n        });\n});\n\nexport const CreateInvoice = (customer, amount, description) => new Promise(async (resolve, reject) => {\n    const { status, data: { customer_code } } = await CreateCustomer(customer);\n\n    request\n        .post(`https://api.paystack.co/paymentrequest`)\n        .set(\"Authorization\", `Bearer ${secret}`)\n        .send({\n            customer: customer_code,\n            description,\n            amount,\n            due_date: \"2018-10-08\"\n        })\n        .end((err, { body }) => {\n            if (err) reject(err);\n            resolve(body);\n        });\n});","import InvoiceModel from './invoice.model';\nimport * as mailer from '../../modules/mailer';\nimport recode from '../../modules/recode';\nimport generateController from '../../modules/generateController';\nimport Invoice from '../../modules/invoice';\n\nexport default generateController(InvoiceModel, {\n    createOne: async (req, res) => {\n        var body = req.body;\n        body.userId = req.user.id;\n        body.marchantEmail = req.user.email;\n        body.status = \"sent\";\n        body.verifyCode = process.env.NODE_ENV === 'testing' ? 'AXYZ0000' : recode();\n        body.totalPrice = 200 + body.purchaseAmount + body.deliveryAmount + ((body.purchaseAmount * 5) / 100);\n\n        try {\n            const { data: { request_code } }  = await Invoice({ email: body.customerEmail, name: body.customerName, phone: body.customerPhone }, body.totalPrice, body.description);\n            \n            body.invoice_code = request_code;\n\n            InvoiceModel.create(body, async (err, doc) => {\n                if (err) return res.status(400).send({ error: { message: 'Could not create the invoice' }, success: false });\n                delete doc.verifyCode;\n                res.send({ data: doc, success: true });\n            });\n        } catch(err) {\n            return res.status(400).send({ err, success: false });\n        }\n    }\n});","import mongoose from 'mongoose';\n\nconst InvoiceSchema = new mongoose.Schema({\n    userId: String,\n    description: String,\n    deliveryAmount: Number,\n    purchaseAmount: Number,\n    totalPrice: Number,\n    customerName: String,\n    customerEmail: String,\n    marchantName: String,\n    marchantAccountNumber: String,\n    marchantBankCode: String,\n    marchantEmail: String,\n    invoice_code: String,\n    verifyCode: String,\n    status: String\n});\n\nexport default mongoose.model('Invoice', InvoiceSchema);"],"sourceRoot":""}