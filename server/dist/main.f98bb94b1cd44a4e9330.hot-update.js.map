{"version":3,"sources":["webpack:///./src/api/modules/mailer.js"],"names":["ZOHO_EMAIL","ZOHO_PASSWORD","transporter","nodemailer","createTransport","host","port","secure","auth","user","pass","from","sendInvoiceMail","customerEmail","totalPrice","resolve","reject","mailOptions","to","subject","text","sendMail","error","info","Error","sendTo","mailOption","console","log","sendReceiptMail","customerName","marchantEmail","amount","all","then","catch","sendTransferMail","esolve","sendDisputeMail","reason","disputeFrom","supportEmail","sendCustormerVerificationCode","code","sendPaymentRequest","marchantName","name"],"mappings":"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","file":"main.f98bb94b1cd44a4e9330.hot-update.js","sourcesContent":["import nodemailer from 'nodemailer';\n\nconst ZOHO_EMAIL = process.env.ZOHO_EMAIL;\nconst ZOHO_PASSWORD = process.env.ZOHO_PASSWORD;\n\nconst transporter = nodemailer.createTransport({\n    host: 'smtp.zoho.com',\n    port: 465,\n    secure: true,\n    auth: {\n        user: ZOHO_EMAIL,\n        pass: ZOHO_PASSWORD\n    }\n});\n\nconst from = 'Pipepay <hello@pipepay.africa>';\n\nexport const sendInvoiceMail = ({ customerEmail, totalPrice }) => new Promise((resolve, reject) => {\n    let mailOptions = {\n        from,\n        to: customerEmail,\n        subject: 'Your Invoice Is Ready',\n        text: `Your invoice is worth ${totalPrice }`,\n    };\n\n    transporter.sendMail(mailOptions, (error, info) => {\n        if (error) {\n            return reject(new Error(error));\n        }\n\n        resolve(info);\n    });\n});\n\nconst sendTo = (mailOption) => new Promise((resolve, reject) => {\n    console.log(\"sendTo\", sendTo);\n    transporter.sendMail(mailOption, (error, info) => {\n        if (error) {\n            console.log(\"error\", error);\n            return reject(new Error(error));\n        }\n\n        resolve(info);\n    });\n});\n\nexport const sendReceiptMail = (customerName, customerEmail, marchantEmail, amount) => new Promise(async (resolve, reject) => {\n    let mailOption = {\n        from,\n        subject: 'Your Receipt Is Ready',\n        text: `${customerName} made payment of ${amount}`,\n    };\n\n    console.log({ customerName, customerEmail, marchantEmail, amount });\n    console.log('sending mails...');\n    Promise.all([\n        sendTo({ ...mailOption, to: customerEmail }),\n        sendTo({ ...mailOption, to: marchantEmail })\n    ]).then(resolve)\n    .catch(reject)\n});\n\nexport const sendTransferMail = (customerEmail, marchantEmail) => new Promise((esolve, reject) => {\n\n});\n\nexport const sendDisputeMail = (marchantEmail, customerEmail, customerName, reason, disputeFrom, supportEmail = 'hello@pipepay.africa') => new Promise(async (resolve, reject) => {\n    let mailOption = {\n        from,\n        subject: 'Payment Dispute',\n    };\n\n    try {\n        if (disputeFrom !== 'marchant') {\n            await Promise.all([\n                sendTo({ ...mailOption, to: customerEmail,  text: 'Your dispute has been received, you will hear from our support rep soon.' }),\n                sendTo({ ...mailOption, to: marchantEmail, text: `New dispute from ${customerName} reason being that: \"${reason}\"` }),\n                sendTo({ ...mailOption, to: supportEmail, text: `New dispute from ${customerEmail} reason being that: \"${reason}\" marchant email is ${marchantEmail}` })\n            ]);\n        } else {\n            await Promise.all([\n                sendTo({ ...mailOption, to: customerEmail,  text: 'Your dispute has been received, you will hear from our support rep soon.' }),\n                sendTo({ ...mailOption, to: marchantEmail, text: `New dispute from ${customerName} reason being that: \"${reason}\"` }),\n                sendTo({ ...mailOption, to: supportEmail, text: `New dispute from ${marchantEmail} reason being that: \"${reason}\" customer email is ${customerEmail}` })\n            ]);\n        }\n        resolve();\n    } catch(err) {\n        reject(err);\n    }\n});\n\nexport const sendCustormerVerificationCode = (customerEmail, code) => new Promise(async (resolve, reject) => {\n    let mailOption = {\n        from,\n        subject: 'Invoice Mail Verification',\n        text: `Your invoice verfication code is ${code}`\n    };\n\n    try {\n        await sendTo({ ...mailOption, to: customerEmail });\n        resolve();\n    } catch(err) {\n        reject(err);\n    }\n});\n\nexport const sendPaymentRequest = ({ amount, name }, customerEmail, marchantName) => new Promise(async (resolve, reject) => {\n    let mailOption = {\n        from,\n        subject: 'Payment Request',\n        text: `${marchantName} is requesting for payment for milestone \"${name}\"`\n    };\n\n    try {\n        await sendTo({ ...mailOption, to: customerEmail });\n        resolve();\n    } catch(err) {\n        console.log('err', err);\n        reject(err);\n    }\n});"],"sourceRoot":""}