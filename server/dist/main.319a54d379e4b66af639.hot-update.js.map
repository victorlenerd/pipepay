{"version":3,"sources":["webpack:///./src/api/modules/transfer.js"],"names":["secret","getReceipt","name","account_number","bank_code","resolve","reject","request","post","set","send","currency","end","err","body","console","log","makeTransfer","recipient_code","amount","data","transfer","status","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,IAAMA,SAAS,kDAAf;;AAEA,IAAMC,aAAa,SAAbA,UAAa,CAACC,IAAD,EAAOC,cAAP,EAAuBC,SAAvB;AAAA,WAAqC,yEAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrFC,QAAA,iDAAAA,CACKC,IADL,8CAEKC,GAFL,CAES,eAFT,cAEoCT,MAFpC,EAGKU,IAHL,CAGU;AACF,oBAAQ,OADN;AAEFR,sBAFE;AAGFC,0CAHE;AAIFC,gCAJE;AAKFO,sBAAU;AALR,SAHV,EAUKC,GAVL,CAUS,UAACC,GAAD,QAAmB;AAAA,gBAAXC,IAAW,QAAXA,IAAW;;AACpB,gBAAID,GAAJ,EAASP,OAAOO,GAAP;AACTE,oBAAQC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;AACAT,oBAAQS,IAAR;AACH,SAdL;AAeH,KAhBuD,CAArC;AAAA,CAAnB;;AAkBA,IAAMG,eAAe,SAAfA,YAAe,CAACC,cAAD,EAAiBC,MAAjB;AAAA,WAA4B,yEAAY,UAACd,OAAD,EAAUC,MAAV,EAAqB;AAC9EC,QAAA,iDAAAA,CACKC,IADL,qCAEKC,GAFL,CAES,eAFT,cAEoCT,MAFpC,EAGKU,IAHL,CAGU;AACF,sBAAU,SADR;AAEFS,0BAFE;AAGFD,0CAHE;AAIFP,sBAAU;AAJR,SAHV,EASKC,GATL,CASS,UAACC,GAAD,EAAMO,IAAN,EAAe;AAChB,gBAAIP,GAAJ,EAASP,OAAOO,GAAP;AACTR,oBAAQe,IAAR;AACH,SAZL;AAaH,KAdgD,CAA5B;AAAA,CAArB;;AAgBA,IAAMC,WAAW,SAAXA,QAAW,CAACnB,IAAD,EAAOC,cAAP,EAAuBC,SAAvB,EAAkCe,MAAlC;AAAA,WAA6C;AAAA,sLAAY,iBAAOd,OAAP,EAAgBC,MAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEdL,WAAWC,IAAX,EAAiBC,cAAjB,EAAiCC,SAAjC,CAFc;;AAAA;AAAA;AAE1DkB,kCAF0D,SAE1DA,MAF0D;AAE1CJ,0CAF0C,SAElDE,IAFkD,CAE1CF,cAF0C;;AAAA,kCAI9DI,UAAUJ,cAJoD;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAKrCD,aAAaC,cAAb,EAA6BC,MAA7B,CALqC;;AAAA;AAAA;AAKtDG,mCALsD,SAKtDA,MALsD;;AAM9D,gCAAIA,OAAJ,EAAYjB;AANkD;AAAA;;AAAA;AAQ9DC,mCAAO,IAAIiB,KAAJ,CAAU,mBAAV,CAAP;;AAR8D;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAWlEjB;;AAXkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,QAA7C;AAAA,CAAjB;;AAeA,+DAAee,QAAf,E","file":"main.319a54d379e4b66af639.hot-update.js","sourcesContent":["import request from 'superagent';\nconst secret = process.env.PAYSTACK_SECRET;\n\nconst getReceipt = (name, account_number, bank_code) => new Promise((resolve, reject) => {\n    request\n        .post(`https://api.paystack.co/transferrecipient`)\n        .set(\"Authorization\", `Bearer ${secret}`)\n        .send({\n            \"type\": \"nuban\",\n            name,\n            account_number,\n            bank_code,\n            currency: 'NGN'\n        })\n        .end((err, { body }) => {\n            if (err) reject(err);\n            console.log('body', body);\n            resolve(body);\n        });\n})\n\nconst makeTransfer = (recipient_code, amount) => new Promise((resolve, reject) => {\n    request\n        .post(`https://api.paystack.co/transfer`)\n        .set(\"Authorization\", `Bearer ${secret}`)\n        .send({\n            \"source\": \"balance\",\n            amount,\n            recipient_code,\n            currency: 'NGN'\n        })\n        .end((err, data) => {\n            if (err) reject(err);\n            resolve(data);\n        });\n});\n\nconst transfer = (name, account_number, bank_code, amount) => new Promise(async (resolve, reject) => {\n    try {\n        const { status, data: { recipient_code  } } = await getReceipt(name, account_number, bank_code);\n\n        if (status && recipient_code) {\n            const { status } = await makeTransfer(recipient_code, amount);\n            if (status) resolve();\n        } else {\n            reject(new Error('No recipient_code'));\n        }\n    } catch(err) {\n        reject(err);\n    }\n});\n\nexport default transfer;"],"sourceRoot":""}